{"version":3,"file":"static/js/837.4959c00a.chunk.js","mappings":"wNACA,GAAgB,OAAS,4BAA4B,iBAAmB,sCAAsC,YAAc,iCAAiC,aAAe,kCAAkC,YAAc,iCAAiC,SAAW,8BAA8B,eAAiB,oCAAoC,SAAW,8BAA8B,YAAc,iCAAiC,iBAAmB,uC,0FC6Ctc,EA3C+B,SAACA,GAM5B,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASD,EAAMI,QAAzC,eAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,OACnB,GAAE,CAACJ,EAAMI,SAEV,IAAMG,EAAmB,YAChBL,GAAYF,EAAMQ,QACnBL,GAAY,GAEPH,EAAMQ,UACXL,GAAY,GACZH,EAAMS,aAAaL,GAE1B,EAMD,OACI,4BACI,iBAAMM,UAAWC,EAAAA,YAAjB,uBACGT,IACK,kBAAMU,QAASL,EAAf,WAAiC,kBAAMP,EAAMI,QAAU,SAE7DF,IACE,0BACI,kBAAOW,SAZA,SAACC,GACpBT,EAAUS,EAAEC,cAAcC,MAC7B,EAUgDC,WAAW,EAAMC,OAAQX,EACnDS,MAAOZ,QAKjC,E,mBCvCKe,GAAQC,EAAAA,EAAAA,GAAY,SACpBC,GAAWD,EAAAA,EAAAA,GAAY,YAElBE,EAAkB,YAAuC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAEnD,OACI,kBAAMC,SAAUH,EAAhB,WACI,uCACGE,IAAQ,gBAAKf,UAAWC,EAAAA,iBAAhB,SACNc,KAEL,0CAAuBE,EAAAA,EAAAA,GAAY,YAAa,WAAY,GAAIR,IAChE,yCAAsBQ,EAAAA,EAAAA,GAAY,WAAY,UAAW,GAAIN,IAC7D,kDAA+BM,EAAAA,EAAAA,GAAY,KAAM,iBAAkB,KAAM,QAAS,CAACC,KAAM,YAAa,QACtG,oDAAiCD,EAAAA,EAAAA,GAAY,sBAAuB,4BAA6B,GAAIN,IACrG,kBATJ,aAWI,gBAAKX,UAAWC,EAAAA,SAAhB,SACKkB,OAAOC,KAAKN,EAAQO,UAAUC,KAAI,SAAAC,GAAG,OAAI,4BAAe,yBAAIA,EAAJ,SAAeN,EAAAA,EAAAA,GAAYM,EAAD,mBAAkBA,GAAO,KAAMd,KAA9Dc,EAAd,QAIrD,EAEDX,GAAkBY,EAAAA,EAAAA,GAAU,CACxBC,KAAM,gBADQD,CAEfZ,GCvBH,IAoGA,EApGoB,SAAC,GAOd,IANHd,EAME,EANFA,QACAgB,EAKE,EALFA,QACApB,EAIE,EAJFA,OACAK,EAGE,EAHFA,aACA2B,EAEE,EAFFA,YACAC,EACE,EADFA,cAGA,GAA8BpC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KAEMI,EAAmB,kBAAsCJ,GAA/BD,EAAP,EAGzB,IAAKsB,EACD,OAAO,SAACc,EAAA,EAAD,IAGX,IAAMC,EAAY,WACd,OAAIf,EAAQgB,gBAEJ,iBAAK9B,UAAWC,EAAAA,eAAhB,sHACuB,gBAAK8B,IAAK,iDAG7BjB,EAAQgB,oBAAb,GAEC,iBAAK9B,UAAWC,EAAAA,eAAhB,yDACY,gBAAK8B,IAAK,uDAIjC,EAEKC,EAAc,SAAC,GAA4C,IAA1ClB,EAAyC,EAAzCA,QAAShB,EAAgC,EAAhCA,QAASD,EAAuB,EAAvBA,iBAE/BoC,EAAU,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC7B,OAAO,4BAAK,4BAAOD,EAAP,QAA8BC,IAC7C,EAED,OACI,iBAAKnC,UAAWC,EAAAA,YAAhB,UACKH,IAAW,mBAAQI,QAASL,EAAjB,mBACZ,gBAAKG,UAAWC,EAAAA,SAAhB,SACKa,EAAQsB,WAEZtB,EAAQuB,UAAW,4BAAK,yCAAwBvB,EAAQuB,WACxDR,IACAf,EAAQwB,4BACL,iBAAKtC,UAAWC,EAAAA,0BAAhB,WAA6C,oDAAmCa,EAAQwB,8BAC5F,iBAAKtC,UAAWC,EAAAA,SAAhB,WACI,uCACCkB,OAAOC,KAAKN,EAAQO,UAAUC,KAAI,SAAAC,GAAG,OAAIT,EAAQO,SAASE,KAAQ,SAACU,EAAD,CAASC,aAAcX,EAAKY,aAAcrB,EAAQO,SAASE,IAAxF,SAIrD,EAaD,OACI,0BACI,iBAAKvB,UAAWC,EAAAA,OAAhB,WACI,gBAAKsC,IAAK,UAAWvC,UAAWC,EAAAA,OAAU8B,IAAKS,KAC/C,iBAAKxC,UAAWC,EAAAA,iBAAhB,WACI,iBAAKD,UAAWC,EAAAA,aAAhB,WACI,gBAAKsC,IAAK,OAAQR,IAAKjB,EAAQ2B,OAAOC,OAASC,IAC9C7C,IAAW,kBAAOoB,KAAK,OAAOf,SAlB3B,SAACC,GACrBA,EAAEwC,OAAOC,MAAM,IAAMnB,EAAYtB,EAAEwC,OAAOC,MAAM,GACnD,QAkBe,iBAAK7C,UAAWC,EAAAA,YAAhB,UACKT,GACK,SAACoB,EAAD,CACEkC,cAAehC,EACfA,QAASA,EACTjB,iBAAkBA,EAClBmB,SAtBX,SAAC+B,GACdC,QAAQC,IAAIF,GACZpB,EAAcoB,GAAUG,MACpB,kBAAMrD,GAAN,GAEP,KAkByB,SAACmC,EAAD,CACElB,QAASA,EACThB,QAASA,EACTD,iBAAkBA,KAC1B,SAAC,EAAD,CACIC,QAASA,EACTJ,OAAQA,EACRK,aAAcA,cAMzC,E,UCzGD,EAA6B,4BCA7B,EAAuB,mBCYvB,EAVa,SAACT,GACV,OACI,iBAAKU,UAAWC,EAAhB,WACI,gBAAK8B,IAAI,uEACRzC,EAAM6D,QAFX,KAEoB,mBAChB,oCAHJ,IAGwB7D,EAAM8D,YAGrC,E,oBCJKC,GAAcC,EAAAA,EAAAA,GAAiB,IAC/B3C,GAAWD,EAAAA,EAAAA,GAAY,YAEzB6C,EAAc,SAACjE,GACf,OACI,kBAAM0B,SAAU1B,EAAMuB,aAAtB,WACI,SAAC2C,EAAA,EAAD,CAAOC,UAAW9C,EAAU+C,KAAM,cAAeC,YAAa,wBAC3DC,SAAU,CAACC,EAAAA,EAAUR,MACxB,2CAGX,EAEDE,GAAc/B,EAAAA,EAAAA,GAAU,CAChBC,KAAM,QADAD,CAEX+B,GAFH,IAIMO,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAID,OAJCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAEFC,WAAa,SAACC,GACV,EAAK1E,MAAM2E,QAAQD,EAAOE,YAC7B,IAkBA,OAlBA,8BAED,WACI,IAAIC,EACAC,KAAK9E,MAAM+E,UAAU/C,KAAI,SAAAgD,GAAK,OAAI,SAAC,EAAD,CAAqBnB,QAASmB,EAAMnB,QAASC,UAAWkB,EAAMC,YAAnDD,EAAME,GAArB,IAElC,OACI,iBAAKxE,UAAWC,EAAhB,WACI,sCACA,8CACmB,mBACf,SAACsD,EAAD,CAAavC,SAAUoD,KAAKL,iBAEhC,yBACKI,MAIhB,OAtBCL,CAAgBW,EAAAA,eAyBtB,I,UC5BA,GAFyBC,EAAAA,EAAAA,KAfH,SAACC,GACnB,MAAM,CACFN,UAAWM,EAAMC,YAAYP,UAC7BH,YAAaS,EAAMC,YAAYV,YAEtC,IAEwB,SAACW,GACtB,MAAM,CACFZ,QAAS,SAACC,GACNW,GAASC,EAAAA,EAAAA,IAAqBZ,GAC7B,EAEZ,GAEwBQ,CAA6CZ,GCCtE,EAhBgB,SAACxE,GACb,OACI,4BACI,SAAC,EAAD,CACIQ,QAASR,EAAMQ,QACfgB,QAASxB,EAAMwB,QACfpB,OAAQJ,EAAMI,OACdK,aAAcT,EAAMS,aACpB2B,YAAapC,EAAMoC,YACnBC,cAAerC,EAAMqC,iBAEzB,SAAC,EAAD,MAGX,E,oBCLKoD,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAcD,OAdCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAEFC,eAAiB,WACb,IAAIC,EAAS,EAAK3F,MAAM4F,OAAOC,OAAOF,QAEjCA,IACDA,EAAS,EAAK3F,MAAM8F,qBAMxB,EAAK9F,MAAM+F,eAAeJ,GAC1B,EAAK3F,MAAMgG,cAAcL,GAC5B,IA8BA,OA9BA,yCACD,WACIb,KAAKY,gBACR,mCAED,SAAmBO,EAAWC,EAAWC,GACjCrB,KAAK9E,MAAM4F,OAAOC,OAAOF,SAAWM,EAAUL,OAAOC,OAAOF,QAC5Db,KAAKY,gBAEZ,uBAED,WACI,IAAIC,EAASb,KAAK9E,MAAM4F,OAAOC,OAAOF,OAEtC,OAAKA,IACDA,EAASb,KAAK9E,MAAM8F,mBAIpB,0BACI,SAAC,GAAD,kBAAahB,KAAK9E,OAAlB,IACSQ,SAAUsE,KAAK9E,MAAM4F,OAAOC,OAAOF,OACnCnE,QAASsD,KAAK9E,MAAMwB,QACpBpB,OAAQ0E,KAAK9E,MAAMI,OACnBK,aAAcqE,KAAK9E,MAAMS,aACzB2B,YAAa0C,KAAK9E,MAAMoC,YACxBC,cAAeyC,KAAK9E,MAAMqC,oBAVnB,SAAC,KAAD,CAAU+D,GAAI,UAczC,OA5CCX,CAAyBY,EAAAA,WA+F/B,GAAeC,EAAAA,EAAAA,KACXlB,EAAAA,EAAAA,KAZkB,SAACC,GAEnB,MAAO,CACH7D,QAAS6D,EAAMC,YAAY9D,QAC3BpB,OAAQiF,EAAMC,YAAYlF,OAC1BiD,UAAWgC,EAAMC,YAAYjC,UAC7ByC,iBAAkBT,EAAMkB,YAAYC,KAAKtB,GACzCuB,OAAQpB,EAAMkB,YAAYE,OAEjC,GAG4B,CACrBV,eAAgBW,EAAAA,GAChBV,cAAeW,EAAAA,GACflG,aAAcmG,EAAAA,GACdxE,YAAayE,EAAAA,GACbxE,cAAeyE,EAAAA,MApDJ,SAACC,GAChB,OAAO,SAAC/G,GACJ,IAAIgH,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXtB,GAASuB,EAAAA,EAAAA,MAEb,OACI,SAACL,GAAD,kBACQ/G,GADR,IAEI4F,OAAQ,CAACoB,SAAAA,EAAUE,SAAAA,EAAUrB,OAAAA,KAGxC,CACJ,GAiCD,CAQCJ,E","sources":["webpack://shkaf/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileFormData.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://shkaf/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://shkaf/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"banner\":\"ProfileInfo_banner__RQgMA\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__rP9Ds\",\"profileInfo\":\"ProfileInfo_profileInfo__eqVEW\",\"profilePhoto\":\"ProfileInfo_profilePhoto__0RCCb\",\"profileData\":\"ProfileInfo_profileData__NPMn8\",\"fullName\":\"ProfileInfo_fullName__wE-yq\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__Kpyh9\",\"contacts\":\"ProfileInfo_contacts__YpTm1\",\"statusLabel\":\"ProfileInfo_statusLabel__HBIJ7\",\"formSummaryError\":\"ProfileInfo_formSummaryError__uZNPe\"};","import React, {useEffect, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n   /* let stateWithSetState = useState(false);\r\n    let editMode = stateWithSetState[0];//в первом элементе массива хранится значение\r\n    let setEditMode = stateWithSetState[1];//во втором элементе хранится функция, которая изменяет значение из 1ого эл-та*/\r\n// пример деструктуризации\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        if (!editMode && props.isOwner) {\r\n            setEditMode(true)\r\n        }\r\n        else if (props.isOwner) {\r\n            setEditMode(false)\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span className={s.statusLabel}>Status: </span>\r\n            {(!editMode) &&\r\n                    <span onClick={activateEditMode}><br/>{props.status || \"---\"}</span>\r\n            }\r\n            {(editMode) &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={activateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\"\r\nimport { createField, FormControl } from \"../../common/FromControls/FormControls\"\r\nimport { reduxForm } from \"redux-form\"\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\nconst Input = FormControl(\"input\")\r\nconst Textarea = FormControl(\"textarea\")\r\n\r\nexport let ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button>Save</button>\r\n            {!!error&& <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>Full name: </div>{createField(\"Full name\", \"fullName\", [], Input)}\r\n            <div>About me: </div>{createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n            <div>Looking for a job: </div>{createField(null, \"lookingForAJob\", null, \"input\", {type: \"checkbox\"}, \"Yes\")}\r\n            <div>Professional skills: </div>{createField(\"Professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            <br />\r\n            Contacts:\r\n            <div className={s.contacts}>\r\n                {Object.keys(profile.contacts).map(key => <div key={key}><b>{key}: </b>{createField(key, `contacts.${key}`, null, Input)}</div>)}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nProfileDataForm = reduxForm({\r\n    form: \"edit-profile\"\r\n})(ProfileDataForm)","import React, { useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport bannerPhoto from \"../../../assets/images/banner-picture.png\"\r\nimport userPhoto from \"../../../assets/images/user_image.png\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport { ProfileDataForm } from \"./ProfileFormData\";\r\n\r\nconst ProfileInfo = ({\r\n    isOwner,\r\n    profile,\r\n    status,\r\n    updateStatus,\r\n    updatePhoto,\r\n    updateProfile\r\n}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const activateEditMode = () => !editMode ? setEditMode(true) : setEditMode(false)\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const setSymbol = () => {\r\n        if (profile.lookingForAJob) {\r\n            return (\r\n                <div className={s.lookingForAJob}>\r\n                    Открыт для вакансий<img src={\"https://emojio.ru/images/apple-b/2705.png\"} />\r\n                </div>\r\n            );\r\n        } else if (!profile.lookingForAJob) {\r\n            return (\r\n                <div className={s.lookingForAJob}>\r\n                    Работаю <img src={\"https://emojis.wiki/emoji-pics/lg/tractor-lg.png\"} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const ProfileData = ({ profile, isOwner, activateEditMode }) => {\r\n\r\n        const Contact = ({ contactTitle, contactValue }) => {\r\n            return <div><span>{contactTitle}: </span>{contactValue}</div>\r\n        }\r\n\r\n        return (\r\n            <div className={s.profileData}>\r\n                {isOwner && <button onClick={activateEditMode}>Edit</button>}\r\n                <div className={s.fullName}>\r\n                    {profile.fullName}\r\n                </div>\r\n                {profile.aboutMe && <div><span>About me: </span>{profile.aboutMe}</div>}\r\n                {setSymbol()}\r\n                {profile.lookingForAJobDescription &&\r\n                    <div className={s.lookingForAJobDescription}><span>Professional skills: </span>{profile.lookingForAJobDescription}</div>}\r\n                <div className={s.contacts}>\r\n                    <div>Contacts:</div>\r\n                    {Object.keys(profile.contacts).map(key => profile.contacts[key] && <Contact contactTitle={key} contactValue={profile.contacts[key]} />)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const updateUserPhoto = (e) => {\r\n        e.target.files[0] && updatePhoto(e.target.files[0])\r\n    }\r\n\r\n    const onSubmit = (formData) => { //обернуть в async await не получится, т к он вернет промис\r\n        console.log(formData)\r\n        updateProfile(formData).then(\r\n            () => activateEditMode()\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.banner}>\r\n                <img alt={\"Profile\"} className={s.banner} src={bannerPhoto} />\r\n                <div className={s.descriptionBlock}>\r\n                    <div className={s.profilePhoto}>\r\n                        <img alt={\"User\"} src={profile.photos.large || userPhoto} />\r\n                        {isOwner && <input type=\"file\" onChange={updateUserPhoto} />}\r\n                    </div>\r\n                    <div className={s.profileInfo}>\r\n                        {editMode\r\n                            ? <ProfileDataForm\r\n                                initialValues={profile}\r\n                                profile={profile}\r\n                                activateEditMode={activateEditMode}\r\n                                onSubmit={onSubmit} />\r\n                            : <ProfileData\r\n                                profile={profile}\r\n                                isOwner={isOwner}\r\n                                activateEditMode={activateEditMode} />}\r\n                        <ProfileStatusWithHooks\r\n                            isOwner={isOwner}\r\n                            status={status}\r\n                            updateStatus={updateStatus} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lzSOf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__c53nU\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://s5o.ru/storage/simple/ru/edt/aa/db/b0/29/rue97ff35b337.png\"/>\r\n            {props.message} <br></br>\r\n            <span>Likes</span> {props.likecount}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {PureComponent} from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {FormControl} from \"../../common/FromControls/FormControls\";\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst Textarea = FormControl(\"textarea\")\r\n\r\nlet AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={\"newPostText\"} placeholder={\"New post will be here\"}\r\n               validate={[required, maxLength30]} />\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddPostForm = reduxForm({\r\n        form: 'post'\r\n})(AddPostForm)\r\n\r\nclass MyPosts extends PureComponent{\r\n\r\n    addNewPost = (values) => {\r\n        this.props.addPost(values.newPostText);\r\n    }\r\n\r\n    render () {\r\n        let postsElements =\r\n            this.props.postsData.map(posts => <Post key={posts.id} message={posts.message} likecount={posts.likesCount}/>)\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <div>\r\n                    Write new post <br/>\r\n                    <AddPostForm onSubmit={this.addNewPost}/>\r\n                </div>\r\n                <div>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n            }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                updatePhoto={props.updatePhoto}\r\n                updateProfile={props.updateProfile}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusThunkCreator,\r\n    getUserProfileThunkCreator,\r\n    updatePhotoThunkCreator,\r\n    updateProfileThunkCreator,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {Navigate, useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile = () => {\r\n        let userId = this.props.router.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                return\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId); // callbacks вызываются когда переходим в Мой профиль, будучи авторизованныи\r\n        this.props.getUserStatus(userId);  // или в профиль другого пользователя, кроме случая\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let userId = this.props.router.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) return <Navigate to={\"/login\"}/>\r\n        }\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.router.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         updatePhoto={this.props.updatePhoto}\r\n                         updateProfile={this.props.updateProfile}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//wrapper to use router's v6 hooks in class comp (to use HOC pattern like in router v5) // по документации\r\n//другими словами прокидываем router = {params} в контейнерную компоненту\r\nconst withRouter = (WrappedContainer) => {\r\n    return (props) => {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n\r\n        return (\r\n            <WrappedContainer\r\n                {...props}\r\n                router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n}\r\n/*const TakeParams = (props) => { //комментатор\r\n    return <ProfileContainer\r\n        {...props}\r\n        params={useParams()}\r\n    />\r\n}*/\r\n\r\n/*let withRouter = (ProfileContainer) => { //комментатор\r\n    return (props) => {\r\n        const match = {params: useParams()};\r\n        return <ProfileContainer {...props} match={match}/>\r\n    }\r\n}*/\r\n\r\n//по Димычу\r\n//let WithUrlDataContainerComponent = withRouter(ProfileContainer);\r\n\r\n/*// код до compose()\r\nexport default connect(mapStateToProps, {getUserProfile: getUserProfileThunkCreator})\r\n(/!*AuthRedirectComponent*!/withRouter(AuthRedirectComponent));//оборачиваем контейнерную компоненту ещё одной компонентой с помощью connect*/\r\n\r\nlet mapStateToProps = (state) => { //функция, которая принимает state целиком, а возвращает только те данные, которые нужны dump компоненте\r\n    // console.log(\"mapStateToProps profile\")\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userPhoto: state.profilePage.userPhoto,\r\n        authorizedUserId: state.authUserBro.data.id,\r\n        isAuth: state.authUserBro.isAuth\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileThunkCreator,\r\n        getUserStatus: getStatusThunkCreator,\r\n        updateStatus: updateStatusThunkCreator,\r\n        updatePhoto: updatePhotoThunkCreator,\r\n        updateProfile: updateProfileThunkCreator}), // самый нижний слой контейнера\r\n    withRouter)// самый внешний слой контейнера\r\n(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","activateEditMode","isOwner","updateStatus","className","s","onClick","onChange","e","currentTarget","value","autoFocus","onBlur","Input","FormControl","Textarea","ProfileDataForm","handleSubmit","profile","error","onSubmit","createField","type","Object","keys","contacts","map","key","reduxForm","form","updatePhoto","updateProfile","Preloader","setSymbol","lookingForAJob","src","ProfileData","Contact","contactTitle","contactValue","fullName","aboutMe","lookingForAJobDescription","alt","bannerPhoto","photos","large","userPhoto","target","files","initialValues","formData","console","log","then","message","likecount","maxLength30","maxLengthCreator","AddPostForm","Field","component","name","placeholder","validate","required","MyPosts","addNewPost","values","addPost","newPostText","postsElements","this","postsData","posts","likesCount","id","PureComponent","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","refreshProfile","userId","router","params","authorizedUserId","getUserProfile","getUserStatus","prevProps","prevState","snapshot","to","React","compose","authUserBro","data","isAuth","getUserProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","updatePhotoThunkCreator","updateProfileThunkCreator","WrappedContainer","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}